using System.IO;
using System.Text;
using System.Linq;
using UnityEngine;
using System.Text.RegularExpressions;
#if UNITY_EDITOR
using UnityEditor;
#endif

[InitializeOnLoad]
public static class NYRAGenerator { //Not Your Regular Auto Generator

    [MenuItem("NYRA/Build NYRA.cs")]
    private static void WriteGeneratedFile() {
        Debug.Log("Writing NYRA.cs");

        var path = string.Concat(Application.dataPath, Path.DirectorySeparatorChar, "Scripts/_Generated/NYRA.cs");
        if (File.Exists(path)) File.Delete(path);

        try {
            using (FileStream stream = File.Open(path, FileMode.OpenOrCreate, FileAccess.Write)) {
                using (StreamWriter writer = new StreamWriter(stream)) {
                    var directory = new DirectoryInfo(Application.dataPath);

                    StringBuilder builder = new StringBuilder();
                    builder.AppendLine("// ----- Generated by NYRAGenerator.cs ----- //");
                    builder.AppendLine("using UnityEngine;\n");
                    builder.AppendLine("namespace NYRA {");

                    //TAGS
                    builder.AppendLine("\tpublic static class Tag {");

                    var tags = UnityEditorInternal.InternalEditorUtility.tags;
                    tags.ToList().Sort();
                    foreach (var tag in tags) {
                        builder.AppendFormat("\t\tpublic static readonly string {0} = \"{1}\";\n", tag, tag);
                    }

                    builder.AppendLine("\t}\n");

                    //SCENES
                    builder.AppendLine("\tpublic static class Scene {");

                    var scenes = directory.GetFiles("*.unity", SearchOption.AllDirectories);
                    foreach (var scene in scenes) {
                        var fileName = Path.GetFileNameWithoutExtension(scene.Name);
                        builder.AppendFormat("\t\tpublic static readonly string {0} = \"{1}\";\n", CleanCSharpName(fileName), fileName);
                    }

                    builder.AppendLine("\t}\n");

                    //LAYERS
                    builder.AppendLine("\tpublic static class Layer {");
                    var layers = UnityEditorInternal.InternalEditorUtility.layers;
                    layers.ToList().Sort();
                    foreach (var layer in layers) {
                        builder.AppendFormat("\t\tpublic static readonly string {0} = \"{1}\";\n", CleanCSharpName(layer), layer);
                        builder.AppendFormat("\t\tpublic static readonly LayerMask {0} = 1 << {1};\n", CleanCSharpName(layer + "Mask"), LayerMask.NameToLayer(layer));
                    }

                    builder.AppendLine("\t}\n");

                    //SORTING LAYERS
                    builder.AppendLine("\tpublic static class SortingLayer {");
                    var sortingLayers = SortingLayer.layers.Select(x => x.name).ToArray();
                    sortingLayers.ToList().Sort();
                    foreach (var sortingLayer in sortingLayers) {
                        builder.AppendFormat("\t\tpublic static readonly string {0} = \"{1}\";\n", CleanCSharpName(sortingLayer), sortingLayer);
                    }

                    var allLayers = sortingLayers.Select(x => CleanCSharpName(x)).ToArray();
                    builder.AppendLine("\t\tpublic static readonly string[] All = new string[]{ " + string.Join(", ", allLayers) + " };");

                    builder.AppendLine("\t}\n");

                    builder.AppendLine("}");
                    writer.Write(builder.ToString());
                    Debug.Log("Succesfully Generated NYRA.cs");
                }
            }
        }
        catch (System.Exception e) {
            Debug.LogException(e);
            if (File.Exists(path)) File.Delete(path);
        }

        AssetDatabase.Refresh();
    }

    private static string CleanCSharpName(string input) {
        var results = Regex.Split(input, @"[\p{P}\p{Z}\p{S}]");
        var result = results.Aggregate("", (acc, x) => acc + x);
        result = Regex.Replace(result, "^[0-9]+", "");
        return result;
    }

}
